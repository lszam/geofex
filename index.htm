<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DOCX to HTML Converter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1>Convert DOCX to HTML</h1>
    <div id="links">
        <a href="#" class="convert-link" data-url="https://api.github.com/repos/lszam/geof-library/contents/exercises/grav_ex/grav_conceitos.docx">Convert Document 1</a>
        <a href="#" class="convert-link" data-url="https://api.github.com/repos/lszam/geof-library/contents/exercises/grav_ex/grav_int_potiguar.docx">Convert Document 2</a>
        <!-- Adicione mais links conforme necessário -->
    </div>
    <div id="output"></div>

    <script>
        document.querySelectorAll('.convert-link').forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                
                var githubApiUrl = event.target.getAttribute('data-url');
                var imageBaseUrl = "https://api.github.com/repos/lszam/geof-library/contents/assets/img/ex"; // Base URL para as imagens
                var figSize = 600; // Largura das figuras
                
                axios.get(githubApiUrl)
                    .then(response => {
                        if (response.status !== 200) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.data;
                    })
                    .then(data => {
                        var content = data.content.replace(/\n/g, ''); // Remove quebras de linha
                        var binaryString = atob(content); // Decodifica base64
                        var arrayBuffer = new ArrayBuffer(binaryString.length);
                        var uint8Array = new Uint8Array(arrayBuffer);
                        for (var i = 0; i < binaryString.length; i++) {
                            uint8Array[i] = binaryString.charCodeAt(i);
                        }
                        return arrayBuffer;
                    })
                    .then(arrayBuffer => mammoth.convertToHtml({arrayBuffer: arrayBuffer}))
                    .then(result => {
                        var htmlContent = result.value;
                        var imagePromises = [];
                        htmlContent = htmlContent.replace(/\[image:(.*?)\]/g, function(match, imageName) {
                            var imageUrl = `${imageBaseUrl}/${imageName.trim()}`;
                            var imageTagPromise = axios.get(imageUrl)
                                .then(response => {
                                    if (response.status === 200) {
                                        return `<img src="${imageUrl}" alt="${imageName.trim()}" style="width: ${figSize}px;">`;
                                    } else {
                                        return `<p>Imagem não encontrada: ${imageName.trim()}</p>`;
                                    }
                                })
                                .catch(() => `<p>Imagem não encontrada: ${imageName.trim()}</p>`);
                            imagePromises.push(imageTagPromise);
                            return imageTagPromise;
                        });

                        Promise.all(imagePromises).then(resolvedImages => {
                            resolvedImages.forEach((resolvedImage, index) => {
                                htmlContent = htmlContent.replace(imagePromises[index], resolvedImage);
                            });
                            displayResult(htmlContent);
                        });
                    })
                    .catch(handleError);
            });
        });

        function displayResult(htmlContent) {
            document.getElementById('output').innerHTML = htmlContent;
        }

        function handleError(err) {
            console.error('Error:', err);
        }
    </script>
</body>
</html>
